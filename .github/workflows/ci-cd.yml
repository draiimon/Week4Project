name: OakTree CI/CD Pipeline

on:
  push:
    branches: [ main, branch1 ]
  pull_request:
    branches: [ main, branch1 ]

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   run: npm install

      # - name: Run tests
      #   run: npm test

      # - name: Lint code
      #   run: npm run lint || true
        
  build-docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/branch1')
    outputs:
      IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up image tag
      id: image_tag
      run: |
        echo "IMAGE_TAG=latest" >> $GITHUB_ENV
        echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT
      
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: draiimon/oaktree:latest
        cache-from: type=registry,ref=draiimon/oaktree:latest
        cache-to: type=inline

  deploy:
    name: Deploy with Terraform
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/branch1')
    env:
      IMAGE_TAG: ${{ needs.build-docker.outputs.IMAGE_TAG }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
          terraform_version: 1.11.4
          terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1
    
    - name: Setup S3 Backend for Terraform
      run: |
        cd terraform
        chmod +x setup-backend.sh
        ./setup-backend.sh
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
      
    - name: Terraform Plan
      run: |
        cd terraform
         terraform plan -out=tfplan \
        -var="aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" \
        -var="aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
