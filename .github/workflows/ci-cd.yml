name: CI/CD Pipeline for OakTree

on:
  push:
    branches:
      - main
      - Week-4
  pull_request:
    branches:
      - main
      - Week-4

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18

      # - name: Install dependencies
      #   run: npm install

      # - name: Run tests
      #   run: npm test

      # - name: Lint code
      #   run: npm run lint || true
        
  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: oaktree-app-dev
          IMAGE_TAG: ${{ github.sha }}
          VPC_ID: "vpc-08c05f6fe25301574"
          SUBNET_ID_1: "subnet-0e73b48f3a4fdf622"
          SUBNET_ID_2: "subnet-0b61cb00a422a00c0"
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Using VPC: $VPC_ID with subnets: $SUBNET_ID_1 and $SUBNET_ID_2"

      # Also push to Docker Hub for backup
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG draiimon112/oaktree-app:week4
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG draiimon112/oaktree-app:latest
          docker push draiimon112/oaktree-app:week4
          docker push draiimon112/oaktree-app:latest
          
  terraform:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/Week-4' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: Terraform Format
        run: |
          cd terraform
          terraform fmt -check
      
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="vpc_id=vpc-08c05f6fe25301574" \
            -var='subnet_ids=["subnet-0e73b48f3a4fdf622", "subnet-0b61cb00a422a00c0"]'
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="vpc_id=vpc-08c05f6fe25301574" \
            -var='subnet_ids=["subnet-0e73b48f3a4fdf622", "subnet-0b61cb00a422a00c0"]'
          
      - name: Export Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: terraform-outputs
        run: |
          cd terraform
          echo "::set-output name=cognito_user_pool_id::$(terraform output -raw cognito_user_pool_id)"
          echo "::set-output name=cognito_client_id::$(terraform output -raw cognito_client_id)"
          echo "::set-output name=dynamodb_table_name::$(terraform output -raw dynamodb_table_name)"
          echo "::set-output name=ecs_cluster_name::$(terraform output -raw ecs_cluster_name)"
          echo "::set-output name=ecs_service_name::$(terraform output -raw ecs_service_name)"
          
  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ needs.terraform.outputs.ecs_cluster_name }} \
            --service ${{ needs.terraform.outputs.ecs_service_name }} \
            --force-new-deployment
          
      - name: Wait for ECS deployment
        run: |
          aws ecs wait services-stable \
            --cluster ${{ needs.terraform.outputs.ecs_cluster_name }} \
            --services ${{ needs.terraform.outputs.ecs_service_name }}

      - name: Verify AWS deployment
        run: |
          echo "Running AWS deployment verification checks"
          echo "Checking DynamoDB table status"
          aws dynamodb describe-table --table-name ${{ needs.terraform.outputs.dynamodb_table_name }} \
            --query "Table.TableStatus" --output text
            
          echo "Verifying Cognito User Pool"
          aws cognito-idp describe-user-pool --user-pool-id ${{ needs.terraform.outputs.cognito_user_pool_id }} \
            --query "UserPool.Status" --output text
            
          echo "Confirming ECS service is running"
          aws ecs describe-services --cluster ${{ needs.terraform.outputs.ecs_cluster_name }} \
            --services ${{ needs.terraform.outputs.ecs_service_name }} \
            --query "services[0].status" --output text
            
          echo "âœ… All AWS checks passed"
      
      - name: Create deployment summary
        id: deployment-summary
        run: |
          echo "### OakTree v4.0 Deployment Summary" > deployment-summary.md
          echo "- **Environment**: Production" >> deployment-summary.md
          echo "- **Deployed at**: $(date)" >> deployment-summary.md
          echo "- **Deployment ID**: ${{ github.sha }}" >> deployment-summary.md
          echo "- **AWS Region**: ${{ secrets.AWS_REGION }}" >> deployment-summary.md
          echo "- **VPC ID**: vpc-08c05f6fe25301574" >> deployment-summary.md
          echo "- **Subnets**: subnet-0e73b48f3a4fdf622, subnet-0b61cb00a422a00c0" >> deployment-summary.md
          echo "- **Cognito User Pool ID**: ${{ needs.terraform.outputs.cognito_user_pool_id }}" >> deployment-summary.md
          echo "- **DynamoDB Table**: ${{ needs.terraform.outputs.dynamodb_table_name }}" >> deployment-summary.md
          echo "- **Status**: âœ… Successful" >> deployment-summary.md

      - name: Send deployment notification
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('./deployment-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            })
          
          echo "ðŸ“§ Notification sent: OakTree v4.0 successfully deployed to AWS"