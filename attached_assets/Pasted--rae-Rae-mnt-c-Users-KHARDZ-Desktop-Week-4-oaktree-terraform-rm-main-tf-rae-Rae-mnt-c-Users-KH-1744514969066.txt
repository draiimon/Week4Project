â•µ
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$ rm main.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$ nano main.tf
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$ terraform init && terraform plan && terraform apply -auto-approve
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.94.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
aws_ecr_repository.oaktree_repo: Refreshing state... [id=oaktree-cloud-app]
aws_vpc.oaktree_vpc: Refreshing state... [id=vpc-0cedca1b00147c7ad]
aws_iam_role.ecs_task_exec: Refreshing state... [id=ecsTaskExecutionRole]
aws_iam_role_policy_attachment.ecs_task_exec_attach: Refreshing state... [id=ecsTaskExecutionRole-20250413022829120700000001]
aws_ecs_task_definition.oaktree_task: Refreshing state... [id=oaktree-task]
aws_internet_gateway.oaktree_igw: Refreshing state... [id=igw-0dcca4f21bb805ec2]
aws_subnet.oaktree_public_c: Refreshing state... [id=subnet-0517c01b0a4422200]
aws_subnet.oaktree_public_a: Refreshing state... [id=subnet-0eaf556277affd820]
aws_subnet.oaktree_public_b: Refreshing state... [id=subnet-0d2f6a8eb94d69e7a]
aws_security_group.oaktree_sg: Refreshing state... [id=sg-08c6abbb67e4d35fe]
aws_lb.oaktree_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71]
aws_lb_listener.oaktree_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_dynamodb_table.oaktree_users will be created
  + resource "aws_dynamodb_table" "oaktree_users" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "user_id"
      + id               = (known after apply)
      + name             = "oaktree-users"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Name" = "oaktree-users"
        }
      + tags_all         = {
          + "Name" = "oaktree-users"
        }
      + write_capacity   = 5

      + attribute {
          + name = "user_id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_ecs_cluster.oaktree_cluster will be created
  + resource "aws_ecs_cluster" "oaktree_cluster" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "oaktree-cluster"
      + tags_all = (known after apply)

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # aws_ecs_service.oaktree_service will be created
  + resource "aws_ecs_service" "oaktree_service" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "oaktree-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = "arn:aws:ecs:ap-southeast-1:321225686735:task-definition/oaktree-task:3"
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "oaktree"
          + container_port   = 80
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = [
              + "sg-08c6abbb67e4d35fe",
            ]
          + subnets          = [
              + "subnet-0517c01b0a4422200",
              + "subnet-0d2f6a8eb94d69e7a",
              + "subnet-0eaf556277affd820",
            ]
        }
    }

  # aws_internet_gateway.oaktree_igw will be updated in-place
  ~ resource "aws_internet_gateway" "oaktree_igw" {
        id       = "igw-0dcca4f21bb805ec2"
      ~ tags     = {
          + "Name" = "oaktree-igw"
        }
      ~ tags_all = {
          + "Name" = "oaktree-igw"
        }
        # (3 unchanged attributes hidden)
    }

  # aws_lb.oaktree_alb will be updated in-place
  ~ resource "aws_lb" "oaktree_alb" {
        id                                                           = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71"
        name                                                         = "oaktree-alb"
      ~ tags                                                         = {
          + "Name" = "oaktree-alb"
        }
      ~ tags_all                                                     = {
          + "Name" = "oaktree-alb"
        }
        # (26 unchanged attributes hidden)

        # (5 unchanged blocks hidden)
    }

  # aws_lb_listener.oaktree_listener will be updated in-place
  ~ resource "aws_lb_listener" "oaktree_listener" {
        id                                                                  = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07"
        tags                                                                = {}
        # (17 unchanged attributes hidden)

      ~ default_action {
          + target_group_arn = (known after apply)
          ~ type             = "fixed-response" -> "forward"
            # (1 unchanged attribute hidden)

            # (1 unchanged block hidden)
        }
    }

  # aws_lb_target_group.oaktree_tg will be created
  + resource "aws_lb_target_group" "oaktree_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "oaktree-target-group"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = "vpc-0cedca1b00147c7ad"

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200-399"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_route_table.oaktree_public_rt will be created
  + resource "aws_route_table" "oaktree_public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = "igw-0dcca4f21bb805ec2"
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "oaktree-public-route-table"
        }
      + tags_all         = {
          + "Name" = "oaktree-public-route-table"
        }
      + vpc_id           = "vpc-0cedca1b00147c7ad"
    }

  # aws_route_table_association.oaktree_rta_a will be created
  + resource "aws_route_table_association" "oaktree_rta_a" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0eaf556277affd820"
    }

  # aws_route_table_association.oaktree_rta_b will be created
  + resource "aws_route_table_association" "oaktree_rta_b" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0d2f6a8eb94d69e7a"
    }

  # aws_route_table_association.oaktree_rta_c will be created
  + resource "aws_route_table_association" "oaktree_rta_c" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0517c01b0a4422200"
    }

  # aws_security_group.oaktree_sg will be updated in-place
  ~ resource "aws_security_group" "oaktree_sg" {
        id                     = "sg-08c6abbb67e4d35fe"
        name                   = "oaktree-sg"
      ~ tags                   = {
          + "Name" = "oaktree-security-group"
        }
      ~ tags_all               = {
          + "Name" = "oaktree-security-group"
        }
        # (8 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_a will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_a" {
        id                                             = "subnet-0eaf556277affd820"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-a"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-a"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_b will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_b" {
        id                                             = "subnet-0d2f6a8eb94d69e7a"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-b"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-b"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_c will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_c" {
        id                                             = "subnet-0517c01b0a4422200"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-c"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-c"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_vpc.oaktree_vpc will be updated in-place
  ~ resource "aws_vpc" "oaktree_vpc" {
        id                                   = "vpc-0cedca1b00147c7ad"
      ~ tags                                 = {
          + "Name" = "oaktree-vpc"
        }
      ~ tags_all                             = {
          + "Name" = "oaktree-vpc"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 8 to add, 8 to change, 0 to destroy.

Changes to Outputs:
  + dynamodb_table_name     = "oaktree-users"
  + ecr_repository_url      = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app"
  + ecs_cluster_name        = "oaktree-cluster"
  + ecs_service_name        = "oaktree-service"
  + internet_gateway_id     = "igw-0dcca4f21bb805ec2"
  + subnet_ids              = [
      + "subnet-0eaf556277affd820",
      + "subnet-0d2f6a8eb94d69e7a",
      + "subnet-0517c01b0a4422200",
    ]
  + task_execution_role_arn = "arn:aws:iam::321225686735:role/ecsTaskExecutionRole"
  + vpc_id                  = "vpc-0cedca1b00147c7ad"

â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions
if you run "terraform apply" now.
terraform apply now -autoaws_ecr_repository.oaktree_repo: Refreshing state... [id=oaktree-cloud-app]
aws_iam_role.ecs_task_exec: Refreshing state... [id=ecsTaskExecutionRole]
aws_vpc.oaktree_vpc: Refreshing state... [id=vpc-0cedca1b00147c7ad]
aws_security_group.oaktree_sg: Refreshing state... [id=sg-08c6abbb67e4d35fe]
aws_subnet.oaktree_public_a: Refreshing state... [id=subnet-0eaf556277affd820]
aws_internet_gateway.oaktree_igw: Refreshing state... [id=igw-0dcca4f21bb805ec2]
aws_subnet.oaktree_public_b: Refreshing state... [id=subnet-0d2f6a8eb94d69e7a]
aws_subnet.oaktree_public_c: Refreshing state... [id=subnet-0517c01b0a4422200]
aws_lb.oaktree_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71]
aws_iam_role_policy_attachment.ecs_task_exec_attach: Refreshing state... [id=ecsTaskExecutionRole-20250413022829120700000001]
aws_ecs_task_definition.oaktree_task: Refreshing state... [id=oaktree-task]
aws_lb_listener.oaktree_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create
  ~ update in-place

Terraform will perform the following actions:

  # aws_dynamodb_table.oaktree_users will be created
  + resource "aws_dynamodb_table" "oaktree_users" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "user_id"
      + id               = (known after apply)
      + name             = "oaktree-users"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Name" = "oaktree-users"
        }
      + tags_all         = {
          + "Name" = "oaktree-users"
        }
      + write_capacity   = 5

      + attribute {
          + name = "user_id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_ecs_cluster.oaktree_cluster will be created
  + resource "aws_ecs_cluster" "oaktree_cluster" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "oaktree-cluster"
      + tags_all = (known after apply)

      + setting {
          + name  = "containerInsights"
          + value = "enabled"
        }
    }

  # aws_ecs_service.oaktree_service will be created
  + resource "aws_ecs_service" "oaktree_service" {
      + availability_zone_rebalancing      = "DISABLED"
      + cluster                            = (known after apply)
      + deployment_maximum_percent         = 200
      + deployment_minimum_healthy_percent = 100
      + desired_count                      = 2
      + enable_ecs_managed_tags            = false
      + enable_execute_command             = false
      + iam_role                           = (known after apply)
      + id                                 = (known after apply)
      + launch_type                        = "FARGATE"
      + name                               = "oaktree-service"
      + platform_version                   = (known after apply)
      + scheduling_strategy                = "REPLICA"
      + tags_all                           = (known after apply)
      + task_definition                    = "arn:aws:ecs:ap-southeast-1:321225686735:task-definition/oaktree-task:3"
      + triggers                           = (known after apply)
      + wait_for_steady_state              = false

      + load_balancer {
          + container_name   = "oaktree"
          + container_port   = 80
          + target_group_arn = (known after apply)
            # (1 unchanged attribute hidden)
        }

      + network_configuration {
          + assign_public_ip = true
          + security_groups  = [
              + "sg-08c6abbb67e4d35fe",
            ]
          + subnets          = [
              + "subnet-0517c01b0a4422200",
              + "subnet-0d2f6a8eb94d69e7a",
              + "subnet-0eaf556277affd820",
            ]
        }
    }

  # aws_internet_gateway.oaktree_igw will be updated in-place
  ~ resource "aws_internet_gateway" "oaktree_igw" {
        id       = "igw-0dcca4f21bb805ec2"
      ~ tags     = {
          + "Name" = "oaktree-igw"
        }
      ~ tags_all = {
          + "Name" = "oaktree-igw"
        }
        # (3 unchanged attributes hidden)
    }

  # aws_lb.oaktree_alb will be updated in-place
  ~ resource "aws_lb" "oaktree_alb" {
        id                                                           = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71"
        name                                                         = "oaktree-alb"
      ~ tags                                                         = {
          + "Name" = "oaktree-alb"
        }
      ~ tags_all                                                     = {
          + "Name" = "oaktree-alb"
        }
        # (26 unchanged attributes hidden)

        # (5 unchanged blocks hidden)
    }

  # aws_lb_listener.oaktree_listener will be updated in-place
  ~ resource "aws_lb_listener" "oaktree_listener" {
        id                                                                  = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07"
        tags                                                                = {}
        # (17 unchanged attributes hidden)

      ~ default_action {
          + target_group_arn = (known after apply)
          ~ type             = "fixed-response" -> "forward"
            # (1 unchanged attribute hidden)

            # (1 unchanged block hidden)
        }
    }

  # aws_lb_target_group.oaktree_tg will be created
  + resource "aws_lb_target_group" "oaktree_tg" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "oaktree-target-group"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = "vpc-0cedca1b00147c7ad"

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = "200-399"
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_route_table.oaktree_public_rt will be created
  + resource "aws_route_table" "oaktree_public_rt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = "igw-0dcca4f21bb805ec2"
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Name" = "oaktree-public-route-table"
        }
      + tags_all         = {
          + "Name" = "oaktree-public-route-table"
        }
      + vpc_id           = "vpc-0cedca1b00147c7ad"
    }

  # aws_route_table_association.oaktree_rta_a will be created
  + resource "aws_route_table_association" "oaktree_rta_a" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0eaf556277affd820"
    }

  # aws_route_table_association.oaktree_rta_b will be created
  + resource "aws_route_table_association" "oaktree_rta_b" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0d2f6a8eb94d69e7a"
    }

  # aws_route_table_association.oaktree_rta_c will be created
  + resource "aws_route_table_association" "oaktree_rta_c" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = "subnet-0517c01b0a4422200"
    }

  # aws_security_group.oaktree_sg will be updated in-place
  ~ resource "aws_security_group" "oaktree_sg" {
        id                     = "sg-08c6abbb67e4d35fe"
        name                   = "oaktree-sg"
      ~ tags                   = {
          + "Name" = "oaktree-security-group"
        }
      ~ tags_all               = {
          + "Name" = "oaktree-security-group"
        }
        # (8 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_a will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_a" {
        id                                             = "subnet-0eaf556277affd820"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-a"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-a"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_b will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_b" {
        id                                             = "subnet-0d2f6a8eb94d69e7a"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-b"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-b"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_c will be updated in-place
  ~ resource "aws_subnet" "oaktree_public_c" {
        id                                             = "subnet-0517c01b0a4422200"
      ~ tags                                           = {
          + "Name" = "oaktree-public-subnet-c"
        }
      ~ tags_all                                       = {
          + "Name" = "oaktree-public-subnet-c"
        }
        # (19 unchanged attributes hidden)
    }

  # aws_vpc.oaktree_vpc will be updated in-place
  ~ resource "aws_vpc" "oaktree_vpc" {
        id                                   = "vpc-0cedca1b00147c7ad"
      ~ tags                                 = {
          + "Name" = "oaktree-vpc"
        }
      ~ tags_all                             = {
          + "Name" = "oaktree-vpc"
        }
        # (18 unchanged attributes hidden)
    }

Plan: 8 to add, 8 to change, 0 to destroy.

Changes to Outputs:
  + dynamodb_table_name     = "oaktree-users"
  + ecr_repository_url      = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app"
  + ecs_cluster_name        = "oaktree-cluster"
  + ecs_service_name        = "oaktree-service"
  + internet_gateway_id     = "igw-0dcca4f21bb805ec2"
  + subnet_ids              = [
      + "subnet-0eaf556277affd820",
      + "subnet-0d2f6a8eb94d69e7a",
      + "subnet-0517c01b0a4422200",
    ]
  + task_execution_role_arn = "arn:aws:iam::321225686735:role/ecsTaskExecutionRole"
  + vpc_id                  = "vpc-0cedca1b00147c7ad"
aws_vpc.oaktree_vpc: Modifying... [id=vpc-0cedca1b00147c7ad]
aws_ecs_cluster.oaktree_cluster: Creating...
aws_dynamodb_table.oaktree_users: Creating...
aws_vpc.oaktree_vpc: Modifications complete after 5s [id=vpc-0cedca1b00147c7ad]
aws_internet_gateway.oaktree_igw: Modifying... [id=igw-0dcca4f21bb805ec2]
aws_subnet.oaktree_public_b: Modifying... [id=subnet-0d2f6a8eb94d69e7a]
aws_security_group.oaktree_sg: Modifying... [id=sg-08c6abbb67e4d35fe]
aws_subnet.oaktree_public_a: Modifying... [id=subnet-0eaf556277affd820]
aws_lb_target_group.oaktree_tg: Creating...
aws_subnet.oaktree_public_c: Modifying... [id=subnet-0517c01b0a4422200]
aws_subnet.oaktree_public_b: Modifications complete after 0s [id=subnet-0d2f6a8eb94d69e7a]
aws_subnet.oaktree_public_a: Modifications complete after 0s [id=subnet-0eaf556277affd820]
aws_internet_gateway.oaktree_igw: Modifications complete after 0s [id=igw-0dcca4f21bb805ec2]
aws_subnet.oaktree_public_c: Modifications complete after 0s [id=subnet-0517c01b0a4422200]
aws_route_table.oaktree_public_rt: Creating...
aws_security_group.oaktree_sg: Modifications complete after 0s [id=sg-08c6abbb67e4d35fe]
aws_lb.oaktree_alb: Modifying... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71]
aws_route_table.oaktree_public_rt: Creation complete after 1s [id=rtb-0c87e38bcdf7d0d49]
aws_route_table_association.oaktree_rta_a: Creating...
aws_route_table_association.oaktree_rta_b: Creating...
aws_route_table_association.oaktree_rta_c: Creating...
aws_lb_target_group.oaktree_tg: Creation complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:targetgroup/oaktree-target-group/b20519327f6e9804]
aws_route_table_association.oaktree_rta_c: Creation complete after 1s [id=rtbassoc-08407edd5c7eb975f]
aws_route_table_association.oaktree_rta_b: Creation complete after 1s [id=rtbassoc-0c9f028d5245e6b33]
aws_route_table_association.oaktree_rta_a: Creation complete after 1s [id=rtbassoc-08b21395fcad0b9e4]
aws_dynamodb_table.oaktree_users: Still creating... [10s elapsed]
aws_dynamodb_table.oaktree_users: Creation complete after 11s [id=oaktree-users]
aws_lb.oaktree_alb: Still modifying... [id=arn:aws:elasticloadbalancing:ap-southea...ancer/app/oaktree-alb/cd78a8b910092b71, 10s elapsed]
aws_lb.oaktree_alb: Still modifying... [id=arn:aws:elasticloadbalancing:ap-southea...ancer/app/oaktree-alb/cd78a8b910092b71, 23s elapsed]
aws_lb.oaktree_alb: Still modifying... [id=arn:aws:elasticloadbalancing:ap-southea...ancer/app/oaktree-alb/cd78a8b910092b71, 33s elapsed]
aws_lb.oaktree_alb: Modifications complete after 34s [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71]
aws_lb_listener.oaktree_listener: Modifying... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07]
aws_lb_listener.oaktree_listener: Modifications complete after 1s [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07]
â•·
â”‚ Warning: Invalid Attribute Combination
â”‚
â”‚   with aws_lb_listener.oaktree_listener,
â”‚   on main.tf line 247, in resource "aws_lb_listener" "oaktree_listener":
â”‚  247:   default_action {
â”‚
â”‚ Attribute "default_action[0].fixed_response" cannot be specified when "default_action[0].type" is "forward".
â”‚
â”‚ This will be an error in a future release.
â•µ
â•·
â”‚ Error: creating ECS Cluster (oaktree-cluster): operation error ECS: CreateCluster, https response error StatusCode: 400, RequestID: b03a5c08-b186-4052-b0ea-3d445ba09128, InvalidParameterException: Arguments on this idempotent request are inconsistent with arguments used in previous request(s).
â”‚
â”‚   with aws_ecs_cluster.oaktree_cluster,
â”‚   on main.tf line 165, in resource "aws_ecs_cluster" "oaktree_cluster":
â”‚  165: resource "aws_ecs_cluster" "oaktree_cluster" {
â”‚
â•µ
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$