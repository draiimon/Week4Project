provider "aws" {
  region = "ap-southeast-1"
}

# VPC Configuration
resource "aws_vpc" "oak_vpc" {
  id = "vpc-06845c6fc8ee58831"
}

# Subnet Configuration
resource "aws_subnet" "oak_subnet_a" {
  vpc_id                  = aws_vpc.oak_vpc.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "ap-southeast-1a"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "oak_subnet_b" {
  vpc_id                  = aws_vpc.oak_vpc.id
  cidr_block              = "10.0.2.0/24"
  availability_zone       = "ap-southeast-1b"
  map_public_ip_on_launch = true
}

resource "aws_subnet" "oak_subnet_c" {
  vpc_id                  = aws_vpc.oak_vpc.id
  cidr_block              = "10.0.3.0/24"
  availability_zone       = "ap-southeast-1c"
  map_public_ip_on_launch = true
}

# Internet Gateway Configuration
resource "aws_internet_gateway" "oak_igw" {
  vpc_id = aws_vpc.oak_vpc.id
}

# ALB Configuration
resource "aws_lb" "oak_alb" {
  name               = "oaktree-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups   = ["sg-07eefbba6c112565c"]
  subnets            = [
    aws_subnet.oak_subnet_a.id,
    aws_subnet.oak_subnet_b.id,
    aws_subnet.oak_subnet_c.id
  ]
}

# ALB Listener Configuration
resource "aws_lb_listener" "oak_alb_listener" {
  load_balancer_arn = aws_lb.oak_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "fixed-response"
    fixed_response {
      status_code = 200
      message_body = "OK"
    }
  }
}

# DynamoDB Table Configuration (with email GSI)
resource "aws_dynamodb_table" "oaktree_users" {
  name           = "oaktree-users"
  hash_key       = "id"
  range_key      = "email"
  billing_mode   = "PAY_PER_REQUEST"

  attribute {
    name = "id"
    type = "S"
  }

  attribute {
    name = "email"
    type = "S"
  }

  global_secondary_index {
    name               = "email-index"
    hash_key           = "email"
    projection_type    = "ALL"
  }

  tags = {
    "Environment" = "production"
  }
}

# ECS Cluster Configuration
resource "aws_ecs_cluster" "oak_ecs_cluster" {
  name = "oak-tree-cluster"
}

# ECS Task Definition Configuration
resource "aws_ecs_task_definition" "oak_task" {
  family                   = "oak-task-family"
  execution_role_arn       = aws_iam_role.ecs_execution_role.arn
  task_role_arn            = aws_iam_role.ecs_task_role.arn
  network_mode            = "awsvpc"
  requires_compatibilities = ["FARGATE"]

  container_definitions = jsonencode([
    {
      name      = "oak-container"
      image     = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app:latest"  # Replace with your actual container image URL
      cpu       = 256
      memory    = 512
      essential = true
      portMappings = [
        {
          containerPort = 80
          hostPort      = 80
        }
      ]
    }
  ])
}

# ECS Service Configuration
resource "aws_ecs_service" "oak_ecs_service" {
  name            = "oak-service"
  cluster         = aws_ecs_cluster.oak_ecs_cluster.id
  task_definition = aws_ecs_task_definition.oak_task.arn
  desired_count   = 1

  network_configuration {
    subnets          = [
      aws_subnet.oak_subnet_a.id,
      aws_subnet.oak_subnet_b.id,
      aws_subnet.oak_subnet_c.id
    ]
    security_groups = ["sg-07eefbba6c112565c"]
    assign_public_ip = true
  }

  load_balancer {
    target_group_arn = aws_lb_target_group.oak_target_group.arn
    container_name   = "oak-container"
    container_port   = 80
  }
}

# IAM Role for ECS Task
resource "aws_iam_role" "ecs_execution_role" {
  name = "ecsExecutionRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role" "ecs_task_role" {
  name = "ecsTaskRole"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action    = "sts:AssumeRole"
        Effect    = "Allow"
        Principal = {
          Service = "ecs-tasks.amazonaws.com"
        }
      }
    ]
  })
}

# Target Group for ECS
resource "aws_lb_target_group" "oak_target_group" {
  name     = "oak-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.oak_vpc.id
}

# Security Group Configuration
resource "aws_security_group" "oak_security_group" {
  name_prefix = "oak-security-group"
  vpc_id      = aws_vpc.oak_vpc.id
}

# ALB Listener Rule Configuration (Optional)
resource "aws_lb_listener_rule" "oak_listener_rule" {
  listener_arn = aws_lb_listener.oak_alb_listener.arn
  priority     = 100

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.oak_target_group.arn
  }

  condition {
    field  = "host-header"
    values = ["*"]
  }
}

rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$