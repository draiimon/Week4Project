
Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$ terraform plan
aws_internet_gateway.oaktree_igw: Refreshing state... [id=igw-0dcca4f21bb805ec2]
aws_iam_role_policy_attachment.ecs_task_exec_attach: Refreshing state... [id=ecsTaskExecutionRole-20250413022829120700000001]
aws_ecs_task_definition.oaktree_task: Refreshing state... [id=oaktree-task]
aws_iam_role.ecs_task_exec: Refreshing state... [id=ecsTaskExecutionRole]
aws_subnet.oaktree_public_a: Refreshing state... [id=subnet-0eaf556277affd820]
aws_subnet.oaktree_public_b: Refreshing state... [id=subnet-0d2f6a8eb94d69e7a]
aws_lb.oaktree_alb: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71]
aws_security_group.oaktree_sg: Refreshing state... [id=sg-08c6abbb67e4d35fe]
aws_vpc.oaktree_vpc: Refreshing state... [id=vpc-0cedca1b00147c7ad]
aws_lb_listener.oaktree_listener: Refreshing state... [id=arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07]
data.aws_security_group.default: Reading...
aws_ecr_repository.oaktree_repo: Refreshing state... [id=oaktree-cloud-app]
aws_subnet.oaktree_public_c: Refreshing state... [id=subnet-0517c01b0a4422200]
data.aws_subnet.oak_subnet_a: Reading...
data.aws_subnet.oak_subnet_b: Reading...
data.aws_subnet.oak_subnet_c: Reading...
data.aws_subnet.oak_subnet_a: Read complete after 0s [id=subnet-0f3ba0093dfbed64a]
data.aws_subnet.oak_subnet_b: Read complete after 0s [id=subnet-0b547561bac6c234c]
data.aws_internet_gateway.oak_igw: Reading...
data.aws_vpc.oak_vpc: Reading...
data.aws_subnet.oak_subnet_c: Read complete after 0s [id=subnet-0a05d6a1b3630dca1]
data.aws_internet_gateway.oak_igw: Read complete after 0s [id=igw-009b817b22bbfe6c7]
data.aws_vpc.oak_vpc: Read complete after 0s [id=vpc-06845c6fc8ee58831]
data.aws_security_group.default: Still reading... [10s elapsed]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with
the following symbols:
  + create
  - destroy

Terraform planned the following actions, but then encountered a problem:

  # aws_dynamodb_table.oaktree_users will be created
  + resource "aws_dynamodb_table" "oaktree_users" {
      + arn              = (known after apply)
      + billing_mode     = "PROVISIONED"
      + hash_key         = "user_id"
      + id               = (known after apply)
      + name             = "oaktree-users"
      + read_capacity    = 5
      + stream_arn       = (known after apply)
      + stream_label     = (known after apply)
      + stream_view_type = (known after apply)
      + tags             = {
          + "Name" = "oaktree-users"
        }
      + tags_all         = {
          + "Name" = "oaktree-users"
        }
      + write_capacity   = 5

      + attribute {
          + name = "user_id"
          + type = "S"
        }

      + point_in_time_recovery (known after apply)

      + server_side_encryption (known after apply)

      + ttl (known after apply)
    }

  # aws_ecr_repository.oaktree_repo will be destroyed
  # (because aws_ecr_repository.oaktree_repo is not in configuration)
  - resource "aws_ecr_repository" "oaktree_repo" {
      - arn                  = "arn:aws:ecr:ap-southeast-1:321225686735:repository/oaktree-cloud-app" -> null
      - force_delete         = true -> null
      - id                   = "oaktree-cloud-app" -> null
      - image_tag_mutability = "MUTABLE" -> null
      - name                 = "oaktree-cloud-app" -> null
      - registry_id          = "321225686735" -> null
      - repository_url       = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app" -> null
      - tags                 = {} -> null
      - tags_all             = {} -> null

      - encryption_configuration {
          - encryption_type = "AES256" -> null
            # (1 unchanged attribute hidden)
        }

      - image_scanning_configuration {
          - scan_on_push = false -> null
        }
    }

  # aws_ecs_cluster.oak_cluster will be created
  + resource "aws_ecs_cluster" "oak_cluster" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + name     = "oak-cluster"
      + tags_all = (known after apply)

      + setting (known after apply)
    }

  # aws_ecs_task_definition.oak_task will be created
  + resource "aws_ecs_task_definition" "oak_task" {
      + arn                      = (known after apply)
      + arn_without_revision     = (known after apply)
      + container_definitions    = jsonencode(
            [
              + {
                  + essential    = true
                  + image        = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app:latest"
                  + name         = "oak-container"
                  + portMappings = [
                      + {
                          + containerPort = 80
                          + hostPort      = 80
                        },
                    ]
                },
            ]
        )
      + cpu                      = "256"
      + enable_fault_injection   = (known after apply)
      + execution_role_arn       = (known after apply)
      + family                   = "oak-task"
      + id                       = (known after apply)
      + memory                   = "512"
      + network_mode             = "awsvpc"
      + requires_compatibilities = [
          + "FARGATE",
        ]
      + revision                 = (known after apply)
      + skip_destroy             = false
      + tags_all                 = (known after apply)
      + task_role_arn            = (known after apply)
      + track_latest             = false
    }

  # aws_ecs_task_definition.oaktree_task will be destroyed
  # (because aws_ecs_task_definition.oaktree_task is not in configuration)
  - resource "aws_ecs_task_definition" "oaktree_task" {
      - arn                      = "arn:aws:ecs:ap-southeast-1:321225686735:task-definition/oaktree-task:3" -> null
      - arn_without_revision     = "arn:aws:ecs:ap-southeast-1:321225686735:task-definition/oaktree-task" -> null
      - container_definitions    = jsonencode(
            [
              - {
                  - environment    = []
                  - essential      = true
                  - image          = "321225686735.dkr.ecr.ap-southeast-1.amazonaws.com/oaktree-cloud-app:latest"
                  - mountPoints    = []
                  - name           = "oaktree"
                  - portMappings   = [
                      - {
                          - containerPort = 80
                          - hostPort      = 80
                          - protocol      = "tcp"
                        },
                    ]
                  - systemControls = []
                  - volumesFrom    = []
                },
            ]
        ) -> null
      - cpu                      = "256" -> null
      - enable_fault_injection   = false -> null
      - execution_role_arn       = "arn:aws:iam::321225686735:role/ecsTaskExecutionRole" -> null
      - family                   = "oaktree-task" -> null
      - id                       = "oaktree-task" -> null
      - memory                   = "512" -> null
      - network_mode             = "awsvpc" -> null
      - requires_compatibilities = [
          - "FARGATE",
        ] -> null
      - revision                 = 3 -> null
      - skip_destroy             = false -> null
      - tags_all                 = {} -> null
      - track_latest             = false -> null
        # (3 unchanged attributes hidden)
    }

  # aws_iam_role.ecs_task_exec will be destroyed
  # (because aws_iam_role.ecs_task_exec is not in configuration)
  - resource "aws_iam_role" "ecs_task_exec" {
      - arn                   = "arn:aws:iam::321225686735:role/ecsTaskExecutionRole" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "ecs-tasks.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-13T02:28:30Z" -> null
      - force_detach_policies = false -> null
      - id                    = "ecsTaskExecutionRole" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "ecsTaskExecutionRole" -> null
      - path                  = "/" -> null
      - tags_all              = {} -> null
      - unique_id             = "AROAUVSUK73HTLRDAAHXL" -> null
        # (3 unchanged attributes hidden)
    }

  # aws_iam_role.oak_ecs_role will be created
  + resource "aws_iam_role" "oak_ecs_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ecs.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "oak-ecs-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # aws_iam_role_policy.oak_ecs_role_policy will be created
  + resource "aws_iam_role_policy" "oak_ecs_role_policy" {
      + id          = (known after apply)
      + name        = "oak-ecs-role-policy"
      + name_prefix = (known after apply)
      + policy      = jsonencode(
            {
              + Statement = [
                  + {
                      + Action   = "logs:*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "ecs:Describe*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                  + {
                      + Action   = "ecs:List*"
                      + Effect   = "Allow"
                      + Resource = "*"
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + role        = (known after apply)
    }

  # aws_iam_role_policy_attachment.ecs_task_exec_attach will be destroyed
  # (because aws_iam_role_policy_attachment.ecs_task_exec_attach is not in configuration)
  - resource "aws_iam_role_policy_attachment" "ecs_task_exec_attach" {
      - id         = "ecsTaskExecutionRole-20250413022829120700000001" -> null
      - policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy" -> null
      - role       = "ecsTaskExecutionRole" -> null
    }

  # aws_internet_gateway.oaktree_igw will be destroyed
  # (because aws_internet_gateway.oaktree_igw is not in configuration)
  - resource "aws_internet_gateway" "oaktree_igw" {
      - arn      = "arn:aws:ec2:ap-southeast-1:321225686735:internet-gateway/igw-0dcca4f21bb805ec2" -> null
      - id       = "igw-0dcca4f21bb805ec2" -> null
      - owner_id = "321225686735" -> null
      - tags     = {} -> null
      - tags_all = {} -> null
      - vpc_id   = "vpc-0cedca1b00147c7ad" -> null
    }

  # aws_lb.oak_alb will be created
  + resource "aws_lb" "oak_alb" {
      + arn                                                          = (known after apply)
      + arn_suffix                                                   = (known after apply)
      + client_keep_alive                                            = 3600
      + desync_mitigation_mode                                       = "defensive"
      + dns_name                                                     = (known after apply)
      + drop_invalid_header_fields                                   = false
      + enable_deletion_protection                                   = false
      + enable_http2                                                 = true
      + enable_tls_version_and_cipher_suite_headers                  = false
      + enable_waf_fail_open                                         = false
      + enable_xff_client_port                                       = false
      + enable_zonal_shift                                           = false
      + enforce_security_group_inbound_rules_on_private_link_traffic = (known after apply)
      + id                                                           = (known after apply)
      + idle_timeout                                                 = 60
      + internal                                                     = false
      + ip_address_type                                              = (known after apply)
      + load_balancer_type                                           = "application"
      + name                                                         = "oaktree-alb"
      + name_prefix                                                  = (known after apply)
      + preserve_host_header                                         = false
      + security_groups                                              = [
          + "sg-07eefbba6c112565c",
        ]
      + subnets                                                      = [
          + "subnet-0a05d6a1b3630dca1",
          + "subnet-0b547561bac6c234c",
          + "subnet-0f3ba0093dfbed64a",
        ]
      + tags                                                         = {
          + "Name" = "oak-alb"
        }
      + tags_all                                                     = {
          + "Name" = "oak-alb"
        }
      + vpc_id                                                       = (known after apply)
      + xff_header_processing_mode                                   = "append"
      + zone_id                                                      = (known after apply)

      + subnet_mapping (known after apply)
    }

  # aws_lb.oaktree_alb will be destroyed
  # (because aws_lb.oaktree_alb is not in configuration)
  - resource "aws_lb" "oaktree_alb" {
      - arn                                                          = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71" -> null
      - arn_suffix                                                   = "app/oaktree-alb/cd78a8b910092b71" -> null
      - client_keep_alive                                            = 3600 -> null
      - desync_mitigation_mode                                       = "defensive" -> null
      - dns_name                                                     = "oaktree-alb-2051245465.ap-southeast-1.elb.amazonaws.com" -> null
      - drop_invalid_header_fields                                   = false -> null
      - enable_cross_zone_load_balancing                             = true -> null
      - enable_deletion_protection                                   = false -> null
      - enable_http2                                                 = true -> null
      - enable_tls_version_and_cipher_suite_headers                  = false -> null
      - enable_waf_fail_open                                         = false -> null
      - enable_xff_client_port                                       = false -> null
      - enable_zonal_shift                                           = false -> null
      - id                                                           = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71" -> null
      - idle_timeout                                                 = 60 -> null
      - internal                                                     = false -> null
      - ip_address_type                                              = "ipv4" -> null
      - load_balancer_type                                           = "application" -> null
      - name                                                         = "oaktree-alb" -> null
      - preserve_host_header                                         = false -> null
      - security_groups                                              = [
          - "sg-08c6abbb67e4d35fe",
        ] -> null
      - subnets                                                      = [
          - "subnet-0517c01b0a4422200",
          - "subnet-0d2f6a8eb94d69e7a",
          - "subnet-0eaf556277affd820",
        ] -> null
      - tags                                                         = {} -> null
      - tags_all                                                     = {} -> null
      - vpc_id                                                       = "vpc-0cedca1b00147c7ad" -> null
      - xff_header_processing_mode                                   = "append" -> null
      - zone_id                                                      = "Z1LMS91P8CMLE5" -> null
        # (3 unchanged attributes hidden)

      - access_logs {
          - enabled = false -> null
            # (2 unchanged attributes hidden)
        }

      - connection_logs {
          - enabled = false -> null
            # (2 unchanged attributes hidden)
        }

      - subnet_mapping {
          - subnet_id            = "subnet-0517c01b0a4422200" -> null
            # (4 unchanged attributes hidden)
        }
      - subnet_mapping {
          - subnet_id            = "subnet-0d2f6a8eb94d69e7a" -> null
            # (4 unchanged attributes hidden)
        }
      - subnet_mapping {
          - subnet_id            = "subnet-0eaf556277affd820" -> null
            # (4 unchanged attributes hidden)
        }
    }

  # aws_lb_listener.oak_listener will be created
  + resource "aws_lb_listener" "oak_listener" {
      + arn                                                                   = (known after apply)
      + id                                                                    = (known after apply)
      + load_balancer_arn                                                     = (known after apply)
      + port                                                                  = 80
      + protocol                                                              = "HTTP"
      + routing_http_request_x_amzn_mtls_clientcert_header_name               = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_issuer_header_name        = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_leaf_header_name          = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_serial_number_header_name = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_subject_header_name       = (known after apply)
      + routing_http_request_x_amzn_mtls_clientcert_validity_header_name      = (known after apply)
      + routing_http_request_x_amzn_tls_cipher_suite_header_name              = (known after apply)
      + routing_http_request_x_amzn_tls_version_header_name                   = (known after apply)
      + routing_http_response_access_control_allow_credentials_header_value   = (known after apply)
      + routing_http_response_access_control_allow_headers_header_value       = (known after apply)
      + routing_http_response_access_control_allow_methods_header_value       = (known after apply)
      + routing_http_response_access_control_allow_origin_header_value        = (known after apply)
      + routing_http_response_access_control_expose_headers_header_value      = (known after apply)
      + routing_http_response_access_control_max_age_header_value             = (known after apply)
      + routing_http_response_content_security_policy_header_value            = (known after apply)
      + routing_http_response_server_enabled                                  = (known after apply)
      + routing_http_response_strict_transport_security_header_value          = (known after apply)
      + routing_http_response_x_content_type_options_header_value             = (known after apply)
      + routing_http_response_x_frame_options_header_value                    = (known after apply)
      + ssl_policy                                                            = (known after apply)
      + tags_all                                                              = (known after apply)
      + tcp_idle_timeout_seconds                                              = (known after apply)

      + default_action {
          + order            = (known after apply)
          + target_group_arn = (known after apply)
          + type             = "forward"
        }

      + mutual_authentication (known after apply)
    }

  # aws_lb_listener.oaktree_listener will be destroyed
  # (because aws_lb_listener.oaktree_listener is not in configuration)
  - resource "aws_lb_listener" "oaktree_listener" {
      - arn                                                                 = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07" -> null
      - id                                                                  = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:listener/app/oaktree-alb/cd78a8b910092b71/43d1d41b577d8c07" -> null
      - load_balancer_arn                                                   = "arn:aws:elasticloadbalancing:ap-southeast-1:321225686735:loadbalancer/app/oaktree-alb/cd78a8b910092b71" -> null
      - port                                                                = 80 -> null
      - protocol                                                            = "HTTP" -> null
      - routing_http_response_server_enabled                                = false -> null
      - tags                                                                = {} -> null
      - tags_all                                                            = {} -> null
        # (11 unchanged attributes hidden)

      - default_action {
          - order            = 1 -> null
          - type             = "fixed-response" -> null
            # (1 unchanged attribute hidden)

          - fixed_response {
              - content_type = "text/plain" -> null
              - message_body = "Hello from ALB!" -> null
              - status_code  = "200" -> null
            }
        }
    }

  # aws_lb_target_group.oak_target_group will be created
  + resource "aws_lb_target_group" "oak_target_group" {
      + arn                                = (known after apply)
      + arn_suffix                         = (known after apply)
      + connection_termination             = (known after apply)
      + deregistration_delay               = "300"
      + id                                 = (known after apply)
      + ip_address_type                    = (known after apply)
      + lambda_multi_value_headers_enabled = false
      + load_balancer_arns                 = (known after apply)
      + load_balancing_algorithm_type      = (known after apply)
      + load_balancing_anomaly_mitigation  = (known after apply)
      + load_balancing_cross_zone_enabled  = (known after apply)
      + name                               = "oak-target-group"
      + name_prefix                        = (known after apply)
      + port                               = 80
      + preserve_client_ip                 = (known after apply)
      + protocol                           = "HTTP"
      + protocol_version                   = (known after apply)
      + proxy_protocol_v2                  = false
      + slow_start                         = 0
      + tags_all                           = (known after apply)
      + target_type                        = "ip"
      + vpc_id                             = "vpc-06845c6fc8ee58831"

      + health_check {
          + enabled             = true
          + healthy_threshold   = 3
          + interval            = 30
          + matcher             = (known after apply)
          + path                = "/"
          + port                = "traffic-port"
          + protocol            = "HTTP"
          + timeout             = 5
          + unhealthy_threshold = 3
        }

      + stickiness (known after apply)

      + target_failover (known after apply)

      + target_group_health (known after apply)

      + target_health_state (known after apply)
    }

  # aws_security_group.oaktree_sg will be destroyed
  # (because aws_security_group.oaktree_sg is not in configuration)
  - resource "aws_security_group" "oaktree_sg" {
      - arn                    = "arn:aws:ec2:ap-southeast-1:321225686735:security-group/sg-08c6abbb67e4d35fe" -> null
      - description            = "Allow inbound traffic for ECS and Load Balancer" -> null
      - egress                 = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - from_port        = 0
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "-1"
              - security_groups  = []
              - self             = false
              - to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ] -> null
      - id                     = "sg-08c6abbb67e4d35fe" -> null
      - ingress                = [
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - from_port        = 80
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 80
                # (1 unchanged attribute hidden)
            },
        ] -> null
      - name                   = "oaktree-sg" -> null
      - owner_id               = "321225686735" -> null
      - revoke_rules_on_delete = false -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
      - vpc_id                 = "vpc-0cedca1b00147c7ad" -> null
        # (1 unchanged attribute hidden)
    }

  # aws_subnet.oaktree_public_a will be destroyed
  # (because aws_subnet.oaktree_public_a is not in configuration)
  - resource "aws_subnet" "oaktree_public_a" {
      - arn                                            = "arn:aws:ec2:ap-southeast-1:321225686735:subnet/subnet-0eaf556277affd820" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "ap-southeast-1a" -> null
      - availability_zone_id                           = "apse1-az1" -> null
      - cidr_block                                     = "172.31.0.0/20" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0eaf556277affd820" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "321225686735" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-0cedca1b00147c7ad" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_b will be destroyed
  # (because aws_subnet.oaktree_public_b is not in configuration)
  - resource "aws_subnet" "oaktree_public_b" {
      - arn                                            = "arn:aws:ec2:ap-southeast-1:321225686735:subnet/subnet-0d2f6a8eb94d69e7a" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "ap-southeast-1b" -> null
      - availability_zone_id                           = "apse1-az2" -> null
      - cidr_block                                     = "172.31.16.0/20" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0d2f6a8eb94d69e7a" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "321225686735" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-0cedca1b00147c7ad" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_subnet.oaktree_public_c will be destroyed
  # (because aws_subnet.oaktree_public_c is not in configuration)
  - resource "aws_subnet" "oaktree_public_c" {
      - arn                                            = "arn:aws:ec2:ap-southeast-1:321225686735:subnet/subnet-0517c01b0a4422200" -> null
      - assign_ipv6_address_on_creation                = false -> null
      - availability_zone                              = "ap-southeast-1c" -> null
      - availability_zone_id                           = "apse1-az3" -> null
      - cidr_block                                     = "172.31.32.0/20" -> null
      - enable_dns64                                   = false -> null
      - enable_lni_at_device_index                     = 0 -> null
      - enable_resource_name_dns_a_record_on_launch    = false -> null
      - enable_resource_name_dns_aaaa_record_on_launch = false -> null
      - id                                             = "subnet-0517c01b0a4422200" -> null
      - ipv6_native                                    = false -> null
      - map_customer_owned_ip_on_launch                = false -> null
      - map_public_ip_on_launch                        = true -> null
      - owner_id                                       = "321225686735" -> null
      - private_dns_hostname_type_on_launch            = "ip-name" -> null
      - tags                                           = {} -> null
      - tags_all                                       = {} -> null
      - vpc_id                                         = "vpc-0cedca1b00147c7ad" -> null
        # (4 unchanged attributes hidden)
    }

  # aws_vpc.oaktree_vpc will be destroyed
  # (because aws_vpc.oaktree_vpc is not in configuration)
  - resource "aws_vpc" "oaktree_vpc" {
      - arn                                  = "arn:aws:ec2:ap-southeast-1:321225686735:vpc/vpc-0cedca1b00147c7ad" -> null
      - assign_generated_ipv6_cidr_block     = false -> null
      - cidr_block                           = "172.31.0.0/16" -> null
      - default_network_acl_id               = "acl-0c504117665c123c3" -> null
      - default_route_table_id               = "rtb-0a6580004c7575d74" -> null
      - default_security_group_id            = "sg-08397be7362978bc5" -> null
      - dhcp_options_id                      = "dopt-0f822bf8f6b855423" -> null
      - enable_dns_hostnames                 = true -> null
      - enable_dns_support                   = true -> null
      - enable_network_address_usage_metrics = false -> null
      - id                                   = "vpc-0cedca1b00147c7ad" -> null
      - instance_tenancy                     = "default" -> null
      - ipv6_netmask_length                  = 0 -> null
      - main_route_table_id                  = "rtb-0a6580004c7575d74" -> null
      - owner_id                             = "321225686735" -> null
      - tags                                 = {} -> null
      - tags_all                             = {} -> null
        # (4 unchanged attributes hidden)
    }

Plan: 8 to add, 0 to change, 12 to destroy.

Changes to Outputs:
  ~ alb_dns_name            = "oaktree-alb-2051245465.ap-southeast-1.elb.amazonaws.com" -> (known after apply)
  + dynamodb_table_name     = "oaktree-users"
  + ecs_cluster_arn         = (known after apply)
  + ecs_task_definition_arn = (known after apply)
  + internet_gateway_id     = "igw-009b817b22bbfe6c7"
  + subnet_ids              = [
      + "subnet-0f3ba0093dfbed64a",
      + "subnet-0b547561bac6c234c",
      + "subnet-0a05d6a1b3630dca1",
    ]
  + vpc_id                  = "vpc-06845c6fc8ee58831"
╷
│ Error: no matching EC2 Security Group found
│
│   with data.aws_security_group.default,
│   on main.tf line 32, in data "aws_security_group" "default":
│   32: data "aws_security_group" "default" {
│
╵
rae@Rae:/mnt/c/Users/KHARDZ/Desktop/Week 4/oaktree/terraform$