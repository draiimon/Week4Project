Week 3: Cloud Services & Infrastructure as Code - Day 16
Introduction
Today marks the final day of my Week 3 project on Cloud Services and Infrastructure as Code. After designing and implementing all the infrastructure components over the past four days, today I focused on deploying the actual infrastructure to AWS, pushing my application container image, and verifying that everything works correctly.
What I Did Today
Infrastructure Deployment:
Executed terraform apply to create all AWS resources
Monitored the deployment process in AWS console
Verified resource creation across services
Retrieved outputs like repository URL and load balancer DNS
Container Deployment:
Built the application Docker image locally
Tagged the image according to ECR requirements
Authenticated with ECR repository
Pushed Docker image to AWS ECR
Testing & Verification:
Monitored ECS service deployment
Checked task status and container logs
Accessed application through load balancer URL
Verified environment variables and AWS integration
Documentation:
Captured screenshots of all deployed resources
Created detailed deployment documentation
Documented common issues and solutions
Outlined future improvements
Resources
AWS Documentation:
ECR Push Commands
ECS Task Monitoring
CloudWatch Logs for Containers
Load Balancer Access Logs
Terraform:
Terraform State Management
Output Variables Usage
Resource Dependencies
Cleanup with Terraform Destroy
Docker:
Image Tagging Best Practices
ECR Authentication
Multi-stage Build Optimization
Challenges & Solutions
Auto-scaling Permission Issues:
Challenge: Received permission errors for auto-scaling configurations.
Solution: Proceeded with deployment without auto-scaling temporarily.
Resource Creation Timing:
Challenge: NAT Gateway and Load Balancer took a long time to provision.
Solution: Learned to be patient with AWS resource creation (5-10 minutes).
Container Startup Issues:
Challenge: Initial container tasks failed to start.
Solution: Used CloudWatch logs to identify and fix environment issues.
Links for Screenshots
Terraform Apply Output : 
TERMINAL OUTPUT 


(IAM USER) ECR Repository with Image: https://console.aws.amazon.com/ecr/repositories/private/321225686735/cloud-app-dashboard

ECS Cluster with Tasks: https://console.aws.amazon.com/ecs/home#/clusters/dev-cluster/services



Running Application:


LOCALHOST:3000 : 










CLOUD:http://dev-alb-1741821292.us-east-1.elb.amazonaws.com












Future Improvements
Add HTTPS support with AWS Certificate Manager
Implement CI/CD pipeline for automated deployments
Add monitoring and alerting with CloudWatch alarms
Optimize container resources for cost efficiency
Implement blue/green deployment strategy
Conclusion
This week has been an incredible learning experience in cloud infrastructure and Infrastructure as Code. I successfully deployed a containerized application to AWS using Terraform to manage the infrastructure. I learned about networking, container management, load balancing, and security in the cloud. The ability to define infrastructure as code is powerful - it makes deployments repeatable, documented, and version-controlled. I'm excited to continue building on these skills and implementing more advanced cloud patterns in the future.

